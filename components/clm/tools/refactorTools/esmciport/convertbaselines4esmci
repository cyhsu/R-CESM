#!/usr/bin/env perl
#=======================================================================
#
# Convert baselines in a cime4 format to the format for the cime5 ESCMI format.
# The main difference is adding dates to the history files.
#
# Usage:
#
# convertbaselines4esmci -baseline <baseline-directory> -tag <tagname to process>
#
#  Erik Kluzek
#  Sep/14/2016
#
#=======================================================================

use Cwd;
use strict;
#use diagnostics;
use English;
use Getopt::Long;
use IO::File;

#-----------------------------------------------------------------------------------------------
# Set the directory that contains this scripts.  If the command was issued using a 
# relative or absolute path, that path is in $ProgDir.  Otherwise assume the
# command was issued from the current working directory.

(my $ProgName = $0) =~ s!(.*)/!!;      # name of this script
my $ProgDir = $1;                      # name of directory containing this script -- may be a
                                       # relative or absolute path, or null if the script is in
                                       # the user's PATH
my $cmdline = "@ARGV";                 # Command line arguments to script
my $cwd = getcwd();                    # current working directory
my $scrdir;                            # absolute pathname of directory that contains this script
my $nm = "$ProgName::";                # name to use if script dies
if ($ProgDir) { 
    $scrdir = absolute_path($ProgDir);
} else {
    $scrdir = $cwd;
}

#-----------------------------------------------------------------------------------------------

sub usage {
    die <<EOF;
SYNOPSIS
     $ProgName [options]	    Converts a baseline tagname from cime4 format to cime5 ESMCI format
                                    It does this by softlinking in extra files
REQUIRED OPTIONS
     -baseline <directory> [or -b]  Directory where baselines are stored
     -tag <tagname>        [or -t]  Tag to convert
OPTIONS
     -newtagname <tagname>          Name of the new baseline tag to generate (by default <tagname>.cime5)
     -debug [or -d]                 Just debug by printing out what the script would do.
                                    This can be useful to find the size of the output area.
     -help [or -h]                  Print usage to STDOUT.

     -verbose [or -v]               Make output more verbose.
     -silent  [or -s]               Silence the NCL output.
EOF
}

#-----------------------------------------------------------------------------------------------

# Process command-line options.

my %opts = ( 
              help             => 0, 
              baseline         => undef,
              tag              => undef,
              newtag           => undef,
              verbose          => 0,
              silent           => 0,
              debug            => 0,
           );
GetOptions(
    "h|help"           => \$opts{'help'},
    "t|tag=s"          => \$opts{'tag'},
    "newtagname=s"     => \$opts{'newtagname'},
    "b|baseline=s"     => \$opts{'baseline'},
    "v|verbose"        => \$opts{'verbose'},
    "s|silent"         => \$opts{'silent'},
    "d|debug"          => \$opts{'debug'},
)  or usage();

# Give usage message.
usage() if $opts{'help'};

# Check for unparsed arguments
if (@ARGV) {
    print "ERROR: unrecognized arguments: @ARGV\n";
    usage();
}

#-----------------------------------------------------------------------------------------------
my $debug;
if ( $opts{'debug'} ) {
  $debug = "DEBUG=TRUE";  
}
my $verbose;
if ( $opts{'verbose'} ) {
  $verbose = "VERBOSE=TRUE";  
}
if ( ! defined($opts{'tag'}) ) {
    print "ERROR: tagname is not defined: \n";
    usage();
}
if ( ! defined($opts{'newtagname'}) ) {
     $opts{'newtagname'} = $opts{'tag'} . ".cime5";
}
if ( ! defined($opts{'baseline'}) ) {
    print "ERROR: baseline directory is not defined: \n";
    usage();
}
my $basedir = $opts{'baseline'}."/".$opts{'tag'};
if ( ! -d $basedir ) {
    print "ERROR: directory does not exist: $basedir \n";
    usage();
}
my $newdir = $opts{'baseline'}."/".$opts{'newtagname'};
mkdir( $newdir, 0777 );

chdir( $basedir );

my @dirs = glob("*");
foreach my $dir ( @dirs ) {
   if ( -d "$basedir/$dir" ) {
      mkdir( "$newdir/$dir", 0777 );
      system( "ln -s $basedir/$dir/CaseDocs $newdir/$dir/CaseDocs" );
      my $cmd = "env DIRECTORY=$basedir/$dir NEWDIR=$newdir/$dir $debug $verbose ncl $scrdir/linkhistorytofileswdate.ncl";
      if ( $opts{'silent'} ) {
         $cmd .= " > /dev/null";
      }

      print "Execute: $cmd\n";
      system( $cmd );
      if ( $dir =~ /1x1|ptsR/ && $dir !~ /mpi-serial/) {
         my $newdir1PE = $dir;
         $newdir1PE =~ s/\./_Mmpi-serial./;
         $cmd = "ln -s $newdir/$dir $newdir/$newdir1PE";
         print "Execute: $cmd\n";
         system( $cmd );
      }
   }
}

#-------------------------------------------------------------------------------

sub absolute_path {
#
# Convert a pathname into an absolute pathname, expanding any . or .. characters.
# Assumes pathnames refer to a local filesystem.
# Assumes the directory separator is "/".
#
  my $path = shift;
  my $cwd = getcwd();  # current working directory
  my $abspath;         # resulting absolute pathname

# Strip off any leading or trailing whitespace.  (This pattern won't match if
# there's embedded whitespace.
  $path =~ s!^\s*(\S*)\s*$!$1!;

# Convert relative to absolute path.

  if ($path =~ m!^\.$!) {          # path is "."
      return $cwd;
  } elsif ($path =~ m!^\./!) {     # path starts with "./"
      $path =~ s!^\.!$cwd!;
  } elsif ($path =~ m!^\.\.$!) {   # path is ".."
      $path = "$cwd/..";
  } elsif ($path =~ m!^\.\./!) {   # path starts with "../"
      $path = "$cwd/$path";
  } elsif ($path =~ m!^[^/]!) {    # path starts with non-slash character
      $path = "$cwd/$path";
  }

  my ($dir, @dirs2);
  my @dirs = split "/", $path, -1;   # The -1 prevents split from stripping trailing nulls
                                     # This enables correct processing of the input "/".

  # Remove any "" that are not leading.
  for (my $i=0; $i<=$#dirs; ++$i) {
      if ($i == 0 or $dirs[$i] ne "") {
          push @dirs2, $dirs[$i];
      }
  }
  @dirs = ();

  # Remove any "."
  foreach $dir (@dirs2) {
      unless ($dir eq ".") {
          push @dirs, $dir;
      }
  }
  @dirs2 = ();

  # Remove the "subdir/.." parts.
  foreach $dir (@dirs) {
    if ( $dir !~ /^\.\.$/ ) {
        push @dirs2, $dir;
    } else {
        pop @dirs2;   # remove previous dir when current dir is ..
    }
  }
  if ($#dirs2 == 0 and $dirs2[0] eq "") { return "/"; }
  $abspath = join '/', @dirs2;
  return( $abspath );
}

#-------------------------------------------------------------------------------

